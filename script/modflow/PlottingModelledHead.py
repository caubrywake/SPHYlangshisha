# -*- coding: utf-8 -*-
"""
MODFLOW HEAD PLOTS

This script imports the outputs generated by modelmuse and generate two plot:
    - the distributed head across the basin, for layer 1 and 2, as a gievn time step, and with the difference with DEM
    - the time series of the head value (layer 1 ans 2) at 4 locations
The plots are then saved in a folder.

Created on Mon Apr  3 08:51:16 2023

@author: carol

"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt

import flopy.utils.binaryfile as bf
import flopy

import rasterio
import geopandas as gpd
import rasterio.features

import glob
import os
import datetime

#%% Setting up path and file name
modelname = "mod6_02.nam"
modelpath  = "D:\\UU\\modflow\\20230420\\"
fig_dir  ='D:/UU/figure/modflow_head/20230420/'

#%% Load input files to get the dem
ml = flopy.modflow.Modflow.load(
    modelname,
    model_ws=modelpath,
    verbose=False,
    check=False,
    exe_name="mfnwt",
)

dem = ml.dis.top.array # the dem (model top) to look at the difference between head and surface
dem[91, 41]
#%% Import shapefiles
path = "D:\\UU\\processed_files\\shapefile\\langshihsa_basin_outline\\LangshisaBasinandSide_outline_2mDEM.shp"
basinoutline = gpd.read_file(path)

path = "D:\\UU\\SPHY\\scratch\\RGI_withingbasin.shp"
glacier = gpd.read_file(path)

path = "D:\\UU\\SPHY\\scratch\\location_utm.shp"
location = gpd.read_file(path)
     
path = "D:/UU\processed_files/shapefile/langshihsa_surfacestream/surfacestream_20230420_2.shp"
rivshp = gpd.read_file(path)  
#%% Import coordinate grid 
# to define which pixels are the AWS, outlet, etc
# grid raster is an empty grid to have the coordinate of the modelled results.
with rasterio.open('D:\\UU\\modflow\\result\\grid_raster.tif') as src:
     # Read the metadata and data of the input raster
     metadata_dem = src.meta
     grid = src.read(1)
     grid_extent = [src.bounds[0], src.bounds[2], src.bounds[1], src.bounds[3]]
     transform = src.transform

# Get 4 locations to look at heads across the basin
#loc1: outlet
#loc 2: GW1
#loc 3 Glacier toe: row 200, 150
#loc 4:  near glacier top  : row 200, 500 

    # Define the UTM point coordinates
pt = location.iloc[1]
x, y = pt.geometry.x, pt.geometry.y
row1, col1 = rasterio.transform.rowcol(transform, x, y)

pt = location.iloc[0]
x, y = pt.geometry.x, pt.geometry.y
row2, col2 = rasterio.transform.rowcol(transform, x, y)

row3, col3 = 200, 150
row4, col4 = 200, 500

loc1 = round(dem[row1, col1])
loc2 = round(dem[row2, col2])
loc3 = round(dem[row3, col3])
loc4 = round(dem[row4, col4])
    
#%% If looping throught many model simulation, craete dataframe with the variables to be named in the title
# here, these are the kx values of the two layers for some test simulation
# create the dataframe
df = pd.DataFrame({
    'col1': [0.1, 0.1, 0.1, 0.15, 0.15, 0.15, 0.2, 0.2, 0.2, 0.3, 0.3, 0.3,0.3],
    'col2': [0.01, 0.05, 0.1, 0.01, 0.05, 0.1, 0.01, 0.05, 0.1, 0.01, 0.05, 0.01, 0.05]
})

# for a single simulation
# create the dataframe
df = pd.DataFrame({
    'col1': [0.3],
    'col2': [0.05]
})

# Data
df = pd.DataFrame({'col1': ['2.00E-06', '2.00E-06', '2.00E-06', '2.00E-06', '1.00E-06', '5.00E-07', '1.00E-07', '5.00E-07', '5.00E-07', '5.00E-07', '5.00E-07', '5.00E-07', '5.00E-07', '5.00E-07', '5.00E-07'],
        'col2': [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.3, 0.0, 0.0, 0.0],
        'col3': [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.1, 0.2, 0.3, 0.4, 0.1, 0.0, 0.0, 0.0]})
#%% create timestep
dis = ml.get_package('DIS')
tm = dis.get_totim()

import datetime

# Set the starting date



#%% Import modflow outputs
# Create a list of all the .bhd files in the folder
#bhd_files = glob.glob(modelpath+"*.bhd") # select all files that are head files
# fir ily one, put name in thw bhd_file direclty
modelname = "mod6_02.nam"
modelpath  = "D:\\UU\\modflow\\20230420\\"
bhd_files = glob.glob(modelpath+modelname[:-4] + "*.bhd") # select all files that are head files

# Loop over each .bhd file in the folder
for i, bhd_file in enumerate(bhd_files):

    # Extract the file name without extension
    #modname = os.path.splitext(os.path.basename(bhd_file))[0]
    modname = 'mod6_02'

    # Extract the heads
    hds = bf.HeadFile(bhd_file)
    
    # Extract the times
    times = hds.get_times()
    
    start_date = datetime.datetime(2013, 12, 31)
    date_times = []
    for time in times:
        delta_days = int(time)
        delta_seconds = int((time - delta_days) * 86400)
        delta = datetime.timedelta(days=delta_days, seconds=delta_seconds)
        date_time = start_date + delta
        rounded_date_time = date_time.replace(hour=0, minute=0, second=0, microsecond=0)
        date_times.append(rounded_date_time.strftime('%Y-%m-%d'))
    tt = pd.DataFrame({'datetime': date_times})
    
    print(date_times)   
    
    # plot of first time step 
    tgoal = '2020-10-05'
    tstep = tt[tt['datetime'] == tgoal].index[0]
    head = hds.get_data(totim=times[tstep])
    head[head <= 0] = np.nan
    head[head > 10000] = np.nan
    hd1 = head[0]
    hd2 = head[2]
# figu just to find location of well
fig, axs = plt.subplots(figsize=(10, 6))
im1 = axs.imshow(hd1, vmin=4100, vmax=4600)
axs.set_xticks(np.arange(0, hd1.shape[1], 10))
axs.set_xticklabels(np.arange(0, hd1.shape[1], 10))
axs.set_yticks(np.arange(1, hd1.shape[0], 10))
axs.set_yticklabels(np.arange(1, hd1.shape[0], 10))
axs.grid(True)
# roe 91, col 41
basinoutline.plot(ax, facecolor='none', edgecolor='black')
glacier.plot(ax=axs[0, 0], facecolor='none', edgecolor='black')
rivshp.plot(ax=axs[0,0], marker='o', facecolor = 'none',edgecolor='black', markersize=0.5, legend=True)
location.plot(ax=axs[0, 0], markersize=1, facecolor='black', edgecolor='black')
cbar1 = plt.colorbar(im1, ax=axs[0, 0], shrink=1)
cbar1.set_label('Head (m)')
axs[0, 0].set_title('Time: {}'.format(round(times[tstep])))
axs[0,0].set_xticklabels([])
axs[0,0].set_yticklabels([])
axs[0, 0].set_xlim(rivshp.total_bounds[0]-300, rivshp.total_bounds[2]+300)
axs[0, 0].set_ylim(rivshp.total_bounds[1]+2000, rivshp.total_bounds[3]+300)  


    # create a new figure with the current time step as the title
    fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(8,4))
    #fig.suptitle(f"{modname}, kx 1= {kx1}, kx2= {kx2}")
    fig.suptitle(f"{modname}, {tgoal}")
    # subplot 1
    im1 = axs[0, 0].imshow(hd1, extent=grid_extent, vmin=4100, vmax=4600)
    basinoutline.plot(ax=axs[0, 0], facecolor='none', edgecolor='black')
    glacier.plot(ax=axs[0, 0], facecolor='none', edgecolor='black')
    rivshp.plot(ax=axs[0,0], marker='o', facecolor = 'none',edgecolor='black', markersize=0.5, legend=True)
    location.plot(ax=axs[0, 0], markersize=1, facecolor='black', edgecolor='black')
    cbar1 = plt.colorbar(im1, ax=axs[0, 0], shrink=1)
    cbar1.set_label('Head (m)')
    axs[0, 0].set_title('Time: {}'.format(round(times[tstep])))
    axs[0,0].set_xticklabels([])
    axs[0,0].set_yticklabels([])
    axs[0, 0].set_xlim(rivshp.total_bounds[0]-300, rivshp.total_bounds[2]+300)
    axs[0, 0].set_ylim(rivshp.total_bounds[1]+2000, rivshp.total_bounds[3]+300)  
    # subplot 2
    im2 = axs[0, 1].imshow(hd2, extent=grid_extent)#, vmin=4100, vmax=4600)
    basinoutline.plot(ax=axs[0, 1], facecolor='none', edgecolor='black')
    glacier.plot(ax=axs[0, 1], facecolor='none', edgecolor='black')
    location.plot(ax=axs[0, 1], markersize=1, facecolor='black', edgecolor='black')
    rivshp.plot(ax=axs[0,1], marker='o', facecolor = 'none',edgecolor='black', markersize=0.5, legend=True)
    cbar2 = plt.colorbar(im2, ax=axs[0, 1], shrink=1)
    cbar2.set_label('Head (m)')
    #axs[0, 1].set_title('Time: {}'.format(round(times[tstep])))
    axs[0,1].set_xticklabels([])
    axs[0,1].set_yticklabels([])

    # subplot 3
    im3 = axs[1, 0].imshow(hd1-dem, extent=grid_extent, vmin=-20, vmax=0, cmap='Blues_r')
    basinoutline.plot(ax=axs[1, 0], facecolor='none', edgecolor='black')
    glacier.plot(ax=axs[1, 0], facecolor='none', edgecolor='black')
    location.plot(ax=axs[1, 0], markersize=0.5, facecolor='black', edgecolor='none')
    rivshp.plot(ax=axs[1,0], marker='o', facecolor = 'none',edgecolor='black', markersize=0.5, legend=True)
    cbar3 = plt.colorbar(im3, ax=axs[1, 0], shrink=1)
    cbar3.set_label('Head - DEM (m)')
    #axs[1, 0].set_title('Time: {}'.format(round(times[tstep])))
    axs[1,0].set_xticklabels([])
    axs[1,0].set_yticklabels([])
    axs[1, 0].set_xlim(rivshp.total_bounds[0]-300, rivshp.total_bounds[2]+300)
    axs[1, 0].set_ylim(rivshp.total_bounds[1]+2000, rivshp.total_bounds[3]+300)  
    
    # subplot 4
    im4 = axs[1, 1].imshow(hd2-dem, extent=grid_extent, vmin=-1500, vmax=0, cmap='Blues_r')
    basinoutline.plot(ax=axs[1, 1], facecolor='none', edgecolor='black')
    glacier.plot(ax=axs[1, 1], facecolor='none', edgecolor='black')
    location.plot(ax=axs[1, 1], markersize=1, facecolor='black', edgecolor='black')
    rivshp.plot(ax=axs[1,1], marker='o', facecolor = 'none',edgecolor='black', markersize=0.5, legend=True)
    cbar4 = plt.colorbar(im4, ax=axs[1, 1], shrink=1)
    cbar4.set_label('Head - DEM (m)')
   # axs[1, 1].set_title('Time: {tgoal}')
    axs[1,1].set_xticklabels([])
    axs[1,1].set_yticklabels([])
        # Set the x-axis and y-axis limits of the subplot to the extent of 'rivshp_merged'


        # figure name
    plt.tight_layout()
    plt.savefig(fig_dir + modname + '_time_step_{}.png'.format(round(times[tstep])), dpi=300, bbox_inches='tight')
    plt.savefig(fig_dir + modname + '_time_step_{}.pdf'.format(round(times[tstep])), dpi=300, bbox_inches='tight')
    plt.show()              

    # For each head file, also extract the values for each time step
    # create empty lists
    hd_diffdem_list = []
    hd2_diffdem_list = []
   
    # get the head time series
    step_size = 1
    # create an empty DataFrame with columns for each well and each head
    columns = ['hd1_well1', 'hd1_well2', 'hd1_well3', 'hd1_well4', 'hd2_well1', 'hd2_well2', 'hd2_well3', 'hd2_well4']
    hd_well = pd.DataFrame(columns=columns)
    
    for tstep in range(0, len(times), step_size):
        # get the head data for the current time step and set invalid values to NaN
        head = hds.get_data(totim=times[tstep])
        head[head <= 0] = np.nan
        head[head > 10000] = np.nan
        hd1 = head[0]
        hd2 = head[2]
        # roe 91, col 41
        # get the head for each well and append to the DataFrame
        hd_well.loc[tstep, 'hd1_well1'] = hd1[81, 30]
        
        hd_well.loc[tstep, 'hd1_well2'] = hd1[row2, col2]
        hd_well.loc[tstep, 'hd1_well3'] = hd1[row3, col3]
        hd_well.loc[tstep, 'hd1_well4'] = hd1[row4, col4]
        hd_well.loc[tstep, 'hd2_well1'] = hd2[81, 30]
        hd_well.loc[tstep, 'hd2_well2'] = hd2[row2, col2]
        hd_well.loc[tstep, 'hd2_well3'] = hd2[row3, col3]
        hd_well.loc[tstep, 'hd2_well4'] = hd2[row4, col4]
    
 # Figure of head time series
  # filtewr to past 2014
  # create a time array

    
## a figutr with just 2 subplot
fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(5,2))
                        

# subplot 5 
axs[0].plot(tt['datetime'], hd_well['hd2_well1']-dem[81, 30],  color='black')
axs[0].set_title('Well 1, ' + str(round(dem[81, 30])) + 'm', fontsize=title_font_size)
axs[0].tick_params(labelsize=tick_font_size, rotation=30)
axs[0].set_xticks(axs[0].get_xticks()[::100])
axs[0].set_xlim(['2016-01-01', '2021-12-31'])
axs[0].set_ylim([-10.4, -10.2])
axs[0].set_ylabel('Head - DEM (m)', fontsize=title_font_size)
# subplot 5 
axs[1].plot(tt['datetime'], hd_well['hd2_well3']-dem[row3, col3],  color='black')
axs[1].set_title('Glacier Toe, ' + str(round(dem[row3, col3])) + 'm', fontsize=title_font_size)
axs[1].tick_params(labelsize=tick_font_size, rotation=30)
axs[1].set_xticks(axs[1].get_xticks()[::100])
axs[1].set_xlim(['2016-01-01', '2021-12-31'])
axs[1].set_ylim([-46, -42])
axs[1].set_ylabel('Head - DEM (m)', fontsize=title_font_size)

plt.tight_layout()
plt.savefig(fig_dir + modname + 'Head_timeseries.png', dpi=300, bbox_inches='tight')
plt.savefig(fig_dir + modname + 'Head_timeseries.pdf', dpi=300, bbox_inches='tight')
plt.show()

####
    fig, axs = plt.subplots(nrows=2, ncols=4, figsize=(13, 7), 
                                gridspec_kw={'wspace': 0.5, 'hspace': 0.3})
    fig.suptitle(f"{modname}, Head - DEM (m)")
        
        # set font sizes for tick labels and titles
    tick_font_size = 8
    title_font_size = 10
    
    # subplot 1
# get the axis object for the subplot
    ax = axs[0, 0]
    ax.plot(tt['datetime'], hd_well['hd1_well1']-loc1)
    ax.set_title('Outlet, lyr 1, ' + str(loc1) + 'm', fontsize=title_font_size)
    ax.tick_params(rotation=30)
    ax.set_xticks(ax.get_xticks()[::150])
    ax.set_xlim(['2014-01-01', '2022-01-01'])

    # subplot 5 
    axs[1, 0].plot(tt['datetime'], hd_well['hd2_well1']-loc1)
    axs[1, 0].set_title('Outlet, lyr 2, ' + str(loc1) + 'm', fontsize=title_font_size)
    axs[1, 0].tick_params(labelsize=tick_font_size, rotation=30)
    
    # subplot 2
    axs[0, 1].plot(tt['datetime'], hd_well['hd1_well2']-loc2)
    axs[0, 1].set_title('Well1, lyr 1, ' + str(loc2) + 'm', fontsize=title_font_size)
    axs[0, 1].tick_params(labelsize=tick_font_size, rotation=30)
    axs[0, 1].set_xticks(axs[0, 1].get_xticks()[::150])
    # subplot 6
    axs[1, 1].plot(tt['datetime'], hd_well['hd2_well2']-loc2)
    axs[1, 1].set_title('Well1, lyr 2, ' + str(loc2) + 'm', fontsize=title_font_size)
    axs[1, 1].tick_params(labelsize=tick_font_size, rotation=30)
    axs[1, 1].set_xticks(axs[1, 1].get_xticks()[::150])
    # subplot 3
    axs[0, 2].plot(tt['datetime'], hd_well['hd1_well3']-loc3)
    axs[0, 2].set_title('Gl. Toe, lyr 1, ' + str(loc3) + 'm', fontsize=title_font_size)
    axs[0, 2].tick_params(labelsize=tick_font_size, rotation=30)
    axs[0, 2].set_xticks(axs[0, 2].get_xticks()[::150])
    # subplot 7 
    axs[1, 2].plot(tt['datetime'], hd_well['hd2_well3']-loc3)
    axs[1, 2].set_title('Gl. Toe, lyr 2, ' + str(loc3) + 'm', fontsize=title_font_size)
    axs[1, 2].tick_params(labelsize=tick_font_size, rotation=30)
    axs[1, 2].set_xticks(axs[1, 2].get_xticks()[::150])
    # subplot 4
    axs[0, 3].plot(tt['datetime'], hd_well['hd1_well4']-loc4)
    axs[0, 3].set_title('Gl. Head, lyr 1, ' + str(loc4) + 'm', fontsize=title_font_size)
    axs[0, 3].tick_params(labelsize=tick_font_size, rotation=30)
    axs[0, 3].set_xticks(axs[0, 3].get_xticks()[::150])
    # subplot 8
    axs[1, 3].plot(tt['datetime'], hd_well['hd2_well4']-loc4)
    axs[1, 3].set_title('Gl. Head, lyr 2, ' + str(loc4) + 'm', fontsize=title_font_size)
    axs[1, 3].tick_params(labelsize=tick_font_size, rotation=30)
    axs[1, 3].set_xticks(axs[1,3].get_xticks()[::150])
        # figure na,e
    plt.tight_layout()
    plt.savefig(fig_dir + modname + 'Head_timeseries.png', dpi=300, bbox_inches='tight')
    plt.show()
    

    """      
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(13, 7), 
                                gridspec_kw={'wspace': 0.5, 'hspace': 0.3})

    startdate = '2031-05-15'
    enddate = '2032-11-01'
    start_date = datetime.datetime.strptime(startdate, '%Y-%m-%d')
    end_date = datetime.datetime.strptime(enddate, '%Y-%m-%d')
    axs[0].plot(date_array, hd_well['hd2_well1']-loc1)
    axs[0].set_title('Outlet, lyr 1, ' + str(loc1) + 'm', fontsize=title_font_size)
    axs[0].tick_params(labelsize=tick_font_size, rotation=30)
    axs[0].set_xlim(start_date, end_date)
    axs[0].set_ylim(6.8, 7.2)
    """
    
    
#%%
"""
    # create a new figure with the current time step as the title
    fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))
    
    # subplot 1
    im1 = axs[0, 0].imshow(hd1, extent=grid_extent, vmin=4100, vmax=4500)
    basinoutline.plot(ax=axs[0, 0], facecolor='none', edgecolor='black')
    glacier.plot(ax=axs[0, 0], facecolor='none', edgecolor='black')
    location.plot(ax=axs[0, 0], markersize=1, facecolor='black', edgecolor='black')
    cbar1 = plt.colorbar(im1, ax=axs[0, 0], shrink=0.5)
    cbar1.set_label('Head (m)')
    axs[0, 0].set_title('Time: {}'.format(times[tstep]))
    axs[0,0].set_xticklabels([])
    axs[0,0].set_yticklabels([])
    
    
    # subplot 2
    im2 = axs[0, 1].imshow(hd2, extent=grid_extent, vmin=4100, vmax=4500)
    basinoutline.plot(ax=axs[0, 1], facecolor='none', edgecolor='black')
    glacier.plot(ax=axs[0, 1], facecolor='none', edgecolor='black')
    location.plot(ax=axs[0, 1], markersize=1, facecolor='black', edgecolor='black')
    cbar2 = plt.colorbar(im2, ax=axs[0, 1], shrink=0.5)
    cbar2.set_label('Head (m)')
    axs[0, 1].set_title('Time: {}'.format(times[tstep]))
    axs[0,1].set_xticklabels([])
    axs[0,1].set_yticklabels([])
    
    # subplot 3
    im3 = axs[1, 0].imshow(hd1-dem, extent=grid_extent, vmin=-50, vmax=50, cmap='RdBu')
    basinoutline.plot(ax=axs[1, 0], facecolor='none', edgecolor='black')
    glacier.plot(ax=axs[1, 0], facecolor='none', edgecolor='black')
    location.plot(ax=axs[1, 0], markersize=1, facecolor='black', edgecolor='black')
    cbar3 = plt.colorbar(im3, ax=axs[1, 0], shrink=0.5)
    cbar3.set_label('Head - DEM (m)')
    axs[1, 0].set_title('Time: {}'.format(times[tstep]))
    axs[1,0].set_xticklabels([])
    axs[1,0].set_yticklabels([])
    
    # subplot 4
    im4 = axs[1, 1].imshow(hd2-dem, extent=grid_extent, vmin=-50, vmax=50, cmap='RdBu')
    basinoutline.plot(ax=axs[1, 1], facecolor='none', edgecolor='black')
    glacier.plot(ax=axs[1, 1], facecolor='none', edgecolor='black')
    location.plot(ax=axs[1, 1], markersize=1, facecolor='black', edgecolor='black')
    cbar4 = plt.colorbar(im4, ax=axs[1, 1], shrink=0.5)
    cbar4.set_label('Head - DEM (m)')
    axs[1, 1].set_title('Time: {}'.format(times[tstep]))
    axs[1,1].set_xticklabels([])
    axs[1,1].set_yticklabels([])
    
    # figure name
    plt.tight_layout()
    plt.savefig(fig_dir + modname + '/time_step_{}.png'.format(times[tstep]), dpi=300, bbox_inches='tight')
    plt.show()
    """



